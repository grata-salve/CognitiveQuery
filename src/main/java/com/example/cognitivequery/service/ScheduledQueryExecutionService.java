package com.example.cognitivequery.service;

import com.example.cognitivequery.bot.CognitiveQueryTelegramBot;
import com.example.cognitivequery.model.AnalysisHistory;
import com.example.cognitivequery.model.ScheduledQuery;
import com.example.cognitivequery.repository.ScheduledQueryRepository;
import com.example.cognitivequery.service.db.DynamicQueryExecutorService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.MDC;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.support.CronExpression;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
@Slf4j
@RequiredArgsConstructor
public class ScheduledQueryExecutionService {

    private final ScheduledQueryRepository scheduledQueryRepository;
    private final DynamicQueryExecutorService queryExecutorService;
    // –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤–Ω–µ–¥—Ä–∏—Ç—å CognitiveQueryTelegramBot –∏–∑-–∑–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏,
    // –µ—Å–ª–∏ –±–æ—Ç —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä—è—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å.
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞,
    // –∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞) –∏–ª–∏
    // –∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç).
    // –ü–†–û–°–¢–û–ô –í–ê–†–ò–ê–ù–¢: –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –±–æ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏,
    // –ò–õ–ò —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å.
    // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    // –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —á–µ—Ä–µ–∑ ApplicationContextAware –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.
    // –õ–∏–±–æ, –±–æ—Ç —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —è —Å–¥–µ–ª–∞—é —Ç–∞–∫, —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å.
    // –ù–û –¥–ª—è @Scheduled –º–µ—Ç–æ–¥–∞, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å self-contained –∏–ª–∏ –∏–º–µ—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    // –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.

    private CognitiveQueryTelegramBot telegramBot; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ç—Ç–µ—Ä

    public void setTelegramBot(CognitiveQueryTelegramBot telegramBot) {
        this.telegramBot = telegramBot;
    }

    @Scheduled(fixedRate = 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 000 –º—Å)
    @Transactional
    public void processScheduledQueries() {
        if (telegramBot == null) {
            log.warn("TelegramBot instance is not set in ScheduledQueryExecutionService. Skipping execution.");
            return;
        }

        LocalDateTime now = LocalDateTime.now();
        // –ò—â–µ–º –∑–∞–ø—Ä–æ—Å—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å
        List<ScheduledQuery> dueQueries = scheduledQueryRepository.findAllByIsEnabledTrueAndNextExecutionAtBeforeOrNextExecutionAtEquals(now, now);

        if (!dueQueries.isEmpty()) {
            log.info("Found {} scheduled queries due for execution.", dueQueries.size());
        }

        for (ScheduledQuery scheduledQuery : dueQueries) {
            MDC.put("scheduledQueryId", String.valueOf(scheduledQuery.getId()));
            MDC.put("telegramId", scheduledQuery.getAppUser().getTelegramId()); // –î–ª—è –ª–æ–≥–æ–≤
            log.info("Executing scheduled query ID: {} for user: {}, chatID: {}",
                    scheduledQuery.getId(), scheduledQuery.getAppUser().getTelegramId(), scheduledQuery.getChatIdToNotify());

            AnalysisHistory history = scheduledQuery.getAnalysisHistory();
            if (history == null || !history.hasCredentials()) {
                log.warn("Scheduled query ID {} references history without credentials or null history. Disabling.", scheduledQuery.getId());
                scheduledQuery.setEnabled(false);
                // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º nextExecutionAt –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ isEnabled
                scheduledQueryRepository.save(scheduledQuery);
                telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(),
                        "‚ö†Ô∏è Scheduled query '" + telegramBot.escapeMarkdownV2(scheduledQuery.getName() != null ? scheduledQuery.getName() : "ID: " + scheduledQuery.getId()) +
                                "' was disabled due to missing DB credentials in the associated analysis history\\.");
                MDC.remove("scheduledQueryId");
                MDC.remove("telegramId");
                continue;
            }

            try {
                DynamicQueryExecutorService.QueryResult result = queryExecutorService.executeQuery(
                        history.getDbHost(), history.getDbPort(), history.getDbName(),
                        history.getDbUser(), history.getDbPasswordEncrypted(), scheduledQuery.getSqlQuery());

                String queryName = telegramBot.escapeMarkdownV2(scheduledQuery.getName() != null ? scheduledQuery.getName() : "ID: " + scheduledQuery.getId());

                if (result.isSuccess()) {
                    telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(), "üìä Results for scheduled query '" + queryName + "':");
                    if (result.type() == DynamicQueryExecutorService.QueryType.SELECT) {
                        @SuppressWarnings("unchecked")
                        List<Map<String, Object>> resultData = (List<Map<String, Object>>) result.data();
                        String outputFormat = scheduledQuery.getOutputFormat();

                        if ("csv".equals(outputFormat)) {
                            telegramBot.sendSelectResultAsCsvFile(scheduledQuery.getChatIdToNotify(), resultData, history.getRepositoryUrl());
                        } else if ("txt".equals(outputFormat)) {
                            telegramBot.sendSelectResultAsTxtFile(scheduledQuery.getChatIdToNotify(), resultData, history.getRepositoryUrl());
                        } else { // text (default)
                            telegramBot.sendSelectResultAsTextInChat(scheduledQuery.getChatIdToNotify(), resultData, history.getRepositoryUrl());
                        }
                    } else { // UPDATE, INSERT, DELETE
                        telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(),
                                "‚úÖ Scheduled query '" + queryName +
                                        "' (non-SELECT) executed successfully\\. Rows affected: " + result.data());
                    }
                } else {
                    log.error("Scheduled query ID {} for user {} failed: {}", scheduledQuery.getId(), scheduledQuery.getAppUser().getTelegramId(), result.errorMessage());
                    telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(),
                            "‚ùå Scheduled query '" + queryName +
                                    "' execution failed: " + telegramBot.escapeMarkdownV2(result.errorMessage()));
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á
                }
            } catch (Exception e) {
                log.error("Unexpected error executing scheduled query ID {}", scheduledQuery.getId(), e);
                telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(),
                        "‚ùå An unexpected error occurred while running scheduled query '" +
                                telegramBot.escapeMarkdownV2(scheduledQuery.getName() != null ? scheduledQuery.getName() : "ID: " + scheduledQuery.getId()) + "'\\.");
            } finally {
                scheduledQuery.setLastExecutedAt(now);
                try {
                    CronExpression cron = CronExpression.parse(scheduledQuery.getCronExpression());
                    LocalDateTime nextExecution = cron.next(now);
                    scheduledQuery.setNextExecutionAt(nextExecution);
                    log.info("Scheduled query ID {} next execution set to: {}", scheduledQuery.getId(), nextExecution);
                } catch (IllegalArgumentException e) {
                    log.error("Invalid CRON expression for scheduled query ID {}: {}. Disabling.", scheduledQuery.getId(), scheduledQuery.getCronExpression(), e);
                    scheduledQuery.setEnabled(false);
                    telegramBot.sendMessage(scheduledQuery.getChatIdToNotify(),
                            "‚ùå Scheduled query '" + telegramBot.escapeMarkdownV2(scheduledQuery.getName() != null ? scheduledQuery.getName() : "ID: " + scheduledQuery.getId()) +
                                    "' has an invalid CRON expression and has been disabled\\.");
                }
                scheduledQueryRepository.save(scheduledQuery);
                MDC.remove("scheduledQueryId");
                MDC.remove("telegramId");
            }
        }
    }
}